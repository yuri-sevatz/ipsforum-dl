#!/bin/env python
import argparse
import os
import re
import subprocess

from cvm.controller import Browser
from datetime import datetime
from dateutil import tz
from selenium.common.exceptions import TimeoutException
from selenium.webdriver import Chrome, ChromeOptions
from urllib.parse import urlparse

import ipsforum_dl


process_begin = datetime.now(tz=tz.tzlocal())


def valid_datetime(s):
    try:
        return datetime.strptime(s, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=tz.tzutc())
    except ValueError:
        try:
            return datetime.strptime(s, "%Y-%m-%dT%H:%M:%S%z")
        except ValueError:
            raise argparse.ArgumentTypeError("Not a valid date: '{}'.".format(s))


def valid_dir(s):
    if not os.path.isdir(s):
        raise argparse.ArgumentTypeError("Not a valid dir: '{}'.".format(s))
    return s


parser = argparse.ArgumentParser(description='IpsForum Downloader')
parser.add_argument(
    '--username', '-u', type=str, action='store', required=True,
    help="username to supply to remote server if logging in"
)
parser.add_argument(
    '--password', '-p', type=str, action='store', required=True,
    help="password to supply to remote server if logging in"
)
parser.add_argument(
    '--output', '-o', type=valid_dir, action='store', default=os.path.curdir,
    help="output directory"
)
parser.add_argument(
    '--reverse', '-r', action='store_true', default=False,
    help="archive older topics first"
)
parser.add_argument(
    '--incremental', '-i', action='store_true', default=False,
    help="save/load progress in <output>/timestamp.chk"
)
parser.add_argument(
    '--full', '-f', action='store_true', default=False,
    help="restart progress in <output>/timestamp.chk"
)
parser.add_argument(
    '--checkpoint', '-c', type=valid_datetime, action='store', default=None,
    help="override progress on start with date/time (e.g. {checkpoint})".format(
        checkpoint=process_begin.strftime("%Y-%m-%dT%H:%M:%S%z")
    )
)
parser.add_argument(
    '--begin', '-b', type=valid_datetime, action='store', default=None,
    help="begin post date/time range (e.g. {begin})".format(
        begin=process_begin.strftime("%Y-%m-%dT%H:%M:%S%z")
    )
)
parser.add_argument(
    '--end', '-e', type=valid_datetime, action='store', default=None,
    help="end post date/time range (e.g. {end})".format(
        end=process_begin.strftime("%Y-%m-%dT%H:%M:%S%z")
    )
)
parser.add_argument(
    '--simulate', '-s', action='store_true', default=False,
    help="simulate execution without writing to disk"
)
parser.add_argument(
    'url', type=str, nargs='+',
    help="sequence of urls to access, of format: {}".format(str([
        "<ips_root>/index.php?/login/",
        "<ips_root>/index.php?/forums/",
        "<ips_root>/index.php?/forums/forum/<forum_id>",
        "<ips_root>/index.php?/forums/topic/<topic_id>",
    ]))
)

args = parser.parse_args()

begin = args.begin
end = args.end

checkpoint = None
checkpoint_path = os.path.join(args.output, '.timestamp.chk')

if not args.full and (args.incremental or args.checkpoint):
    try:
        checkpoint = args.checkpoint if args.checkpoint else datetime.fromtimestamp(os.stat(checkpoint_path).st_mtime).replace(tzinfo=tz.tzutc())
        if begin and not begin <= checkpoint:
            raise ValueError(
                (
                    "Checkpoint not in range [begin, end]: "
                    "requires -b [--begin] {begin} <= -c [--checkpoint] {checkpoint}"
                ).format(begin=begin, checkpoint=checkpoint)
            )
        if end and not checkpoint <= end:
            raise ValueError(
                (
                    "Checkpoint not in range [begin, end]: "
                    "requires -c [--checkpoint] {checkpoint} <= -e [--end] {end}"
                ).format(checkpoint=checkpoint, end=end)
            )
        begin = checkpoint if not begin else max(begin, checkpoint)
    except FileNotFoundError:
        pass
else:
    if begin and end and not begin <= end:
        raise ValueError(
            (
                "Cannot define range [begin, end]: "
                "requires -b [--begin] {begin} <= -e [--end] {end}"
            ).format(begin=args.begin, end=args.end)
        )


def windows_filename(filename: str):
    return filename\
        .replace('<', '')\
        .replace('>', '')\
        .replace(':', '')\
        .replace('"', '')\
        .replace('/', '')\
        .replace('\\', '')\
        .replace('|', '')\
        .replace('?', '')\
        .replace('*', '')


def handle_topic(path: str):
    print("handle_topic: {}".format(browser.url))
    hrefs = []
    if not args.reverse:
        topic = browser.load(ipsforum_dl.TopicPage())
        if topic.nav:
            if topic.nav.last and topic.nav.last.displayed:
                print('Topic >>')
                browser.scroll_element(topic.nav.last)
                topic.nav.last.click()
                topic.nav.last.unload()
    found_range = False
    while True:
        topic = browser.load(ipsforum_dl.TopicPage())
        for comment in topic.comments:
            if comment.date and (begin or end):
                modified = valid_datetime(comment.date.attribute('datetime'))
                if (begin and begin > modified) or (end and modified < end):
                    if found_range:
                        break
                    continue
                else:
                    found_range = True
            for attachment in comment.attachments:
                href = attachment.attribute('href')
                hrefs.append(href)
                print('Attachment: {}'.format(href))
        else:
            if topic.nav:
                if not args.reverse:
                    if topic.nav.prev and topic.nav.prev.displayed:
                        print('Topic <')
                        browser.scroll_element(topic.nav.prev)
                        topic.nav.prev.click()
                        topic.nav.prev.unload()
                        continue
                else:
                    if topic.nav.next and topic.nav.next.displayed:
                        print('Topic >')
                        browser.scroll_element(topic.nav.next)
                        topic.nav.next.click()
                        topic.nav.next.unload()
                        continue
        break
    for href in hrefs:
        if href.startswith('http://1.1.1.1/bmi/'):
            href = 'http://' + href.split('http://1.1.1.1/bmi/', 1)[1]
        src = urlparse(href).path
        download = os.path.join(path, '{}'.format(os.path.basename(src)))
        if not args.simulate and not os.path.exists(download):
            if not os.path.exists(path):
                os.makedirs(path)
            print('GET {}... '.format(href), end='', flush=True)
            try:
                browser.save(href, download)
            except ConnectionError as e:
                print("Error: {}".format(e))
                continue
            else:
                print('Done!')


def handle_forum(path: str):
    print("handle_forum: {}".format(browser.url))
    hrefs = []
    if args.reverse:
        forum = browser.load(ipsforum_dl.ForumPage())
        if forum.nav:
            if forum.nav.last and forum.nav.last.displayed:
                print('Forum >>')
                browser.scroll_element(forum.nav.last)
                forum.nav.last.click()
                forum.nav.last.unload()
    found_range = False
    while True:
        forum = browser.load(ipsforum_dl.ForumPage())
        if not len(forum.topics):
            break
        for topic in forum.topics:
            if topic.date and (begin or end):
                modified = valid_datetime(topic.date.attribute('datetime'))
                if (begin and begin > modified) or (end and modified < end):
                    if found_range:
                        break
                    continue
                else:
                    found_range = True
            name = topic.title.text
            href = topic.title.attribute('href')
            hrefs.append((name, href))
            print('Topic: {} -> {} '.format(name, href))
        else:
            if forum.nav:
                if args.reverse:
                    if forum.nav.prev and forum.nav.prev.displayed:
                        print('Forum <')
                        browser.scroll_element(forum.nav.prev)
                        forum.nav.prev.click()
                        forum.nav.prev.unload()
                        continue
                else:
                    if forum.nav.next and forum.nav.next.displayed:
                        print('Forum >')
                        browser.scroll_element(forum.nav.next)
                        forum.nav.next.click()
                        forum.nav.next.unload()
                        continue
        break
    for name, href in hrefs:
        query = urlparse(href).query
        directory = os.path.join(path, windows_filename(query.split("/forums/topic/", 1)[1]))
        try:
            browser.url = href
        except TimeoutException as e:
            print(e)
        else:
            handle_topic(directory)


def handle_index(path: str):
    print("handle_index: {}".format(browser.url))
    hrefs = []
    index = browser.load(ipsforum_dl.IndexPage())
    for forum in index.forums:
        if forum.date and (begin or end):
            modified = valid_datetime(forum.date.attribute('datetime'))
            if (begin and begin > modified) or (end and modified < end):
                continue
        name = forum.title.text
        href = forum.title.attribute('href')
        hrefs.append((name, href))
        print('Forum: {} -> {} '.format(name, href))
    for name, href in hrefs:
        query = urlparse(href).query
        directory = os.path.join(path, windows_filename(query.split("/forums/forum/", 1)[1]))
        try:
            browser.url = href
        except TimeoutException as e:
            print(e)
        else:
            handle_forum(directory)


def handle_login(path: str):
    print("handle_login: {}".format(browser.url))
    login = browser.load(ipsforum_dl.LoginPage())
    login.username.input(args.username)
    login.password.input(args.password)
    login.submit.click()
    login.submit.unload()


def chrome():
    options = ChromeOptions()
    p = subprocess.Popen(
        ['chromium', '--version'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    version, error = p.communicate()
    number = str(version).split(' ')[1]
    agent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{number} Safari/537.36'.format(number=number)
    options.add_argument('--headless')
    options.add_argument('--window-size=1920,1080')
    options.add_argument("--user-agent={}".format(agent))
    prefs = {
        "profile.managed_default_content_settings.images": 2,
        "profile.managed_default_content_settings.javascript": 2,
        "profile.managed_default_content_settings.css": 2,
    }
    options.add_experimental_option("prefs", prefs)
    driver = Chrome(chrome_options=options)
    return driver


browser = Browser(chrome())

rpaths = [
    (r"/index\.php\?/login/$", handle_login),
    (r"/index\.php\?/forums/$", handle_index),
    (r"/index\.php\?/forums/forum/", handle_forum),
    (r"/index\.php\?/forums/topic/", handle_topic),
]

try:
    for url in args.url:
        for pattern, func in rpaths:
            if re.search(pattern, url):
                browser.url = url
                func(args.output)
                break
        else:
            raise ValueError("Url path must match one of {}".format(str([pattern for pattern, func in rpaths])))
    process_end = process_begin if not end else min(end, process_begin)
    if not args.simulate and (args.full or args.incremental):
        with open(checkpoint_path, 'a'):
            os.utime(checkpoint_path, (process_end.timestamp(), process_end.timestamp()))
finally:
    browser.quit()
